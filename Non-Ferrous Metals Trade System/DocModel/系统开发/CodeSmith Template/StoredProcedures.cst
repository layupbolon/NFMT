<%@ CodeTemplate Language="C#"  Debug="True"Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database table schema." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Source" %>
<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="True" Category="Options" Description="If true drop statements will be generated to drop existing stored procedures." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert statements will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update statements will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="False" Category="Options" Description="If true delete statements will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeUpdateStatus" Type="System.Boolean" Default="True" Category="Options" Description="If true updateStatus statements will be generated." %>
<%@ Property Name="IncludeGoback" Type="System.Boolean" Default="True" Category="Options" Description="If true goback statements will be generated." %>

<%--<%@ Property Name="InsertPrefix" Type="System.String" Default="_" Category="Style" Description="Prefix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdatePrefix" Type="System.String" Default="_" Category="Style" Description="Prefix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeletePrefix" Type="System.String" Default="_" Category="Style" Description="Prefix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectPrefix" Type="System.String" Default="_" Category="Style" Description="Prefix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllPrefix" Type="System.String" Default="_" Category="Style" Description="Prefix to use for all generated SELECT stored procedures." %>--%>

<%@ Property Name="InsertSuffix" Type="System.String" Default="Insert" Category="Style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateSuffix" Type="System.String" Default="Update" Category="Style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteSuffix" Type="System.String" Default="Delete" Category="Style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectSuffix" Type="System.String" Default="Get" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="Load" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="UpdateStatusSuffix" Type="System.String" Default="UpdateStatus" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="GoBackSuffix" Type="System.String" Default="GoBack" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>


<%@ Property Name="Creator" Type="System.String" Default="CodeSmith" Category="Style" Description="The creator name of the procedure" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>

<%--<% foreach(SchemaExplorer.TableSchema SourceTable in Tables){%>--%>
<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("SourceTable does not contain a primary key."); %>
<% if (IncludeDrop) { %>
	<% if (IncludeDelete) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= DeleteSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= DeleteSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= DeleteSuffix %>]
GO

	<% } %>
	<% if (IncludeGet) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= SelectSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= SelectSuffix %>]
GO

	<% } %>
	<% if (IncludeGetList) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectAllSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= SelectAllSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= SelectAllSuffix %>]
GO

	<% } %>
	<% if (IncludeInsert) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= InsertSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= InsertSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= InsertSuffix %>]
GO

	<% } %>
	<% if (IncludeUpdate) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= UpdateSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= UpdateSuffix %>]
GO

	<% } %>
    <% if (IncludeUpdateStatus) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateStatusSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= UpdateStatusSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= UpdateStatusSuffix %>]
GO

	<% } %>
    <% if (IncludeGoback) { %>
/****** Object:  Stored Procedure <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateStatusSuffix %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[<%= SourceTable.Name %><%= GoBackSuffix %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %><%= GoBackSuffix %>]
GO

	<% } %>
    
<% } %>

<%--UpdateStatus Begin--%>
<% if (IncludeUpdateStatus) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateStatusSuffix %>
// 存储过程功能描述：更新<%= SourceTable.Name %>中的状态
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateStatusSuffix %>
	@id int = null,
    @status int = null,
    @lastModifyId int = null
AS
declare @StatusNameCode varchar(50),@str varchar(1000)

select @StatusNameCode = StatusNameCode from NFMT_Basic.dbo.BDStatus where TableName = 'dbo.<%= SourceTable.Name %>'

set @str = 'update <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>] '+
           ' set ' + @StatusNameCode + ' = ' + Convert(varchar,@status)   <%= GetUpdateStatusString(SourceTable) %>
           +' where <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = '+ Convert(varchar,@id) 
exec(@str)

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--UpdateStatus End--%>


<%--Goback Begin--%>
<% if (IncludeGoback) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= GoBackSuffix %>
// 存储过程功能描述：撤返<%= SourceTable.Name %>，并同步工作流中的状态
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= GoBackSuffix %>
	@id int = null,
    @status int = null,
    @lastModifyId int = null,
    @dbName varchar(200) = null,
    @tableName varchar(50) = null
AS
declare @StatusNameCode varchar(50),@str varchar(1000)

select @StatusNameCode = StatusNameCode from NFMT_Basic.dbo.BDStatus where TableName = 'dbo.<%= SourceTable.Name %>'

set @str = 'update <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>] '+
           ' set ' + @StatusNameCode + ' = ' + Convert(varchar,@status)   <%= GetUpdateStatusString(SourceTable) %>
           +' where <%= SourceTable.PrimaryKey.MemberColumns[0].Name %> = '+ Convert(varchar,@id) 
set @str = @str + ' update NFMT_WorkFlow.dbo.Wf_DataSource set DataStatus = (select DetailId from NFMT_Basic.dbo.BDStatusDetail where StatusName = ''已作废'' and StatusId = 1) where DataBaseName = '''+@dbName+''' and TableName = '''+@tableName+''' and RowId = ' + Convert(varchar,@id)
exec(@str)

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--Goback End--%>



<%--Delete Begin--%>
<% if (IncludeDelete) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= DeleteSuffix %>
// 存储过程功能描述：删除<%= SourceTable.Name %>中的指定一条记录
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= DeleteSuffix %>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
AS

DELETE FROM <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>]
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--Delete End--%>





<%--Get Begin--%>
<% if (IncludeGet) { %>
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectSuffix %>
// 存储过程功能描述：查询指定<%= SourceTable.Name %>的一条记录
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectSuffix %>
    /*
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
    */
    @id int
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM
	<%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>]
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @id
	<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--Get End--%>





<%--GetList Begin--%>
<% if (IncludeGetList) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectAllSuffix %>
// 存储过程功能描述：查询所有<%= SourceTable.Name %>记录
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= SelectAllSuffix %>
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM
	<%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>]

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--GetList End--%>






<%--Insert Begin--%>
<% if (IncludeInsert) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= InsertSuffix %>
// 存储过程功能描述：新增一条<%= SourceTable.Name %>记录
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1 && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64)) {
	ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
%>
CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= InsertSuffix %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
    <% if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="CreateTime"||SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="LastModifyId"||SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="LastModifyTime"){%>
        <% continue;}%>
	<%= GetSqlParameterStatement(SourceTable.NonPrimaryKeyColumns[i]) %><%if(SourceTable.NonPrimaryKeyColumns[i].AllowDBNull){%> =NULL<% } %> ,
	<% } %>
	<%= GetSqlParameterStatement(primaryKey, true) %>
AS

<% if (primaryKey.DataType == DbType.Guid) { %>
SET @<%= primaryKey.Name %> = NEWID()

<% } %>
INSERT INTO <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>] (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	[<%= primaryKey.Name %>],
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>]<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	@<%= primaryKey.Name %>,
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
    <% if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="CreateTime"){%>
        getdate()
     <%}
       else if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="LastModifyId") {%>
       @CreatorId
     <%}
       else if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="LastModifyTime"){%>
       getdate()
     <%}else{ %>
	@<%= SourceTable.NonPrimaryKeyColumns[i].Name %><%} if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
)

<% if (primaryKey.DataType == DbType.Int16 || primaryKey.DataType == DbType.Int32 || primaryKey.DataType == DbType.Int64) { %>

SET @<%= primaryKey.Name %> = @@IDENTITY
<% } %>
<% } else { %>
CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= InsertSuffix %>
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.Columns[i]) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
AS

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>] (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	@<%= SourceTable.Columns[i].Name %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
)
<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<%--Insert End--%>





<%--Update Begin--%>
<% if (IncludeUpdate) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
/*----------------------------------------------------------------
// Copyright (C) 2014-2015 上海迪亮信息科技有限公司 版权所有。 
// 存储过程名：<%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateSuffix %>
// 存储过程功能描述：更新<%= SourceTable.Name %>
// 创建人：CodeSmith
// 创建时间： <% =DateTime.Now.ToLongDateString() %>
----------------------------------------------------------------*/

CREATE PROCEDURE <%= GetTableOwner(SourceTable) %><%= SourceTable.Name %><%= UpdateSuffix %>
    <% =GetParaInSP(SourceTable) %>
AS

UPDATE <%= GetTableOwner(SourceTable) %>[<%= SourceTable.Name %>] SET
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
    <% if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="CreatorId"||SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="CreateTime"){continue;}
       else if(SourceTable.NonPrimaryKeyColumns[i].Name.ToString()=="LastModifyTime"){%>
    [<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = getdate()
     <%}else{ %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = @<%= SourceTable.NonPrimaryKeyColumns[i].Name %><%} if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
<% } %>

<%--Update End--%>



<script runat="template">
public string GetParaInSP(SchemaExplorer.TableSchema table)
{
    string result = string.Empty;
    for(int i = 0;i<table.Columns.Count;i++)
    {
        if(SourceTable.Columns[i].Name.ToString()=="CreatorId"||SourceTable.Columns[i].Name.ToString()=="CreateTime"||SourceTable.Columns[i].Name.ToString()=="LastModifyTime")
            continue;
        result += GetSqlParameterStatement(SourceTable.Columns[i]);
        if(table.Columns[i].AllowDBNull)
            result +=" = NULL";
        result +=",\r\n";
    }
    return string.IsNullOrEmpty(result) ? string.Empty : result.Substring(0,result.Length-3);
}    
public string GetTableOwner(SchemaExplorer.TableSchema SourceTable)
{
	return GetTableOwner(true,SourceTable);
}

public string GetTableOwner(bool includeDot,SchemaExplorer.TableSchema SourceTable)
{
	if (SourceTable.Owner.Length > 0)
	{
		return "[" + SourceTable.Owner + "].";
	}
	else
	{
		return "";
	}
}

public string GetUpdateStatusString(SchemaExplorer.TableSchema table)
{
    List<string> list = new List<string>();
    string result = string.Empty;
    for(int i =0;i<table.Columns.Count;i++)
    {
        list.Add(table.Columns[i].Name.ToString());
    }
    if(list.Contains("LastModifyId"))
        result+="+', LastModifyId = ' + Convert(varchar,@lastModifyId)  + ' ,";
    if(list.Contains("LastModifyTime"))
        result+=" LastModifyTime = getdate()'";
    
    return result;
}
</script>